<?xml version="1.0" encoding="UTF-8"?>

<syntax name="r">
    <meta>
        <name>R</name>
        <type>script</type>
        <preferred-file-extension>R</preferred-file-extension>
        <scriptable shebang="#!/usr/bin/env Rscript" />
    </meta>
    
    <detectors>
        <extension priority="1.0">R,r</extension>
    </detectors>
    
    <indentation>
        <increase>
            <expression>\{\s*$</expression>
        </increase>
        <decrease>
            <expression>^\s*\}</expression>
        </decrease>
    </indentation>
    
    <comments>
        <single>
            <expression>#</expression>
        </single>
    </comments>
    
    <brackets>
        <pair open="{" close="}" />
        <pair open="[" close="]" />
        <pair open="(" close=")" />
    </brackets>
    
    <surrounding-pairs>
        <pair open="{" close="}" />
        <pair open="[" close="]" />
        <pair open="(" close=")" />
        <pair open="&apos;" close="&apos;" />
        <pair open="&quot;" close="&quot;" />
        <pair open="`" close="`" />
    </surrounding-pairs>
    
    <scopes>
        <include syntax="self" collection="all" />
    </scopes>
    
    <collections>
        <collection name="all">
            <include syntax="self" collection="keywords" />
            <include syntax="self" collection="operators" />
            <include syntax="self" collection="values" />
            <include syntax="self" collection="strings" />
            <include syntax="self" collection="comments" />
            <include syntax="self" collection="blocks" />
            <include syntax="self" collection="types" />
            <include syntax="self" collection="misc" />
        </collection>
        
        <collection name="keywords">
            <scope name="r.keyword">
                <expression>\b(if|break|next|repeat|else|for|return|switch|while|in|function)\b</expression>
            </scope>
        </collection>
        
        <collection name="operators">
            <scope name="r.operator.arithmetic">
                <expression>\-|\+|\*|\/|%\/%|%%|%\*%|%in%|%o%|%x%|\^</expression>
            </scope>
            
            <scope name="r.operator.assignment">
                <expression>=|&lt;-|&lt;&lt;-|-&gt;|-&gt;&gt;</expression>
            </scope>
            
            <scope name="r.operator.comparison">
                <expression>==|!=|&lt;|&gt;|&lt;=|&gt;=</expression>
            </scope>
            
            <scope name="r.operator.logical">
                <expression>!|&amp;{1,2}|\|{1,2}</expression>
            </scope>
            
            <scope name="r.operator.index">
                <expression>\[\[?|\]\]?</expression>
            </scope>
            
            <scope name="r.operator.other">
                <expression>\.\.\.|\$|@|:|\~</expression>
            </scope>
            
            <scope name="r.operator.infix">
                <expression>%[^%\s]+%</expression>
            </scope>
        </collection>
        
        <collection name="values">
            <scope name="r.value.null">
                <strings>
                    <string>NULL</string>
                </strings>
            </scope>
            
            <scope name="r.value.number">
                <expression>((0(x|X)[0-9a-fA-F]*)|(([0-9]+\.?[0-9]*)|(\.[0-9]+))((e|E)(\+|-)?[0-9]+)?)(i|L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)</expression>
            </scope>
            
            <scope name="r.value.boolean">
                <expression>TRUE|FALSE|T|F</expression>
            </scope>
            
            <scope name="r.value.misc">
                <expression>NA|Inf|NaN|pi|letters|LETTERS|month\.abb|month\.name</expression>
            </scope>
        </collection>
        
        <collection name="strings">
            <scope name="r.string.single-quoted">
                <expression>&apos;((?&lt;=\\)&apos;|[^&apos;])*&apos;</expression>
            </scope>
            
            <scope name="r.string.double-quoted">
                <expression>&quot;((?&lt;=\\)&quot;|[^&quot;])*&quot;</expression>
            </scope>
        </collection>
        
        <collection name="comments">
            <scope name="r.comment" spell-check="true">
                <expression>\#.*$</expression>
            </scope>
        </collection>
        
        <collection name="blocks">
            <scope name="r.block">
                <context behavior="subtree" />
                <starts-with>
                    <expression>\{</expression>
                </starts-with>
                <ends-width>
                    <expression>\}</expression>
                </ends-width>
                <subscopes>
                    <include syntax="self" collection="all" />
                </subscopes>
            </scope>
        </collection>
        
        <collection name="types">
            <scope name="r.identifier.type.basic">
                <expression>(?&lt;!\.)\b(logical|numeric|character|complex|matrix|array|data\.frame|list|factor)(?=\s*\()</expression>
            </scope>
        </collection>
        
        <collection name="misc">
            <scope name="r.call">
                <expression>([\w.]+)(?=\s*\())</expression>
                <capture number="1" name="r.identifier.function" />
            </scope>
            
            <scope name="r.namespaced-object">
                <expression>([\w.]+)(::)(?=\w)</expression>
                <capture number="1" name="r.identifier.namespace" />
                <capture number="2" name="r.operator.namespace" />
            </scope>
            
            <scope name="r.arguments">
                <starts-with>
                    <expression>(\()</expression>
                    <capture number="1" name="r.bracket" />
                </starts-with>
                <ends-with>
                    <expression>(\))</expression>
                    <capture number="1" name="r.bracket" />
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="values" />
                    <include syntax="self" collection="strings" />
                    <include syntax="self" collection="types" />
                    <include syntax="self" collection="misc" />
                    
                    <scope name="r.separator">
                        <expression>\s*,\s*</expression>
                    </scope>
                    <scope name="r.identifier.argument">
                        <symbol type="argument" />
                        <expression>([\w.]+)(=(?=[^=]))</expression>
                        <capture number="1" name="r.identifier.argument.name" />
                        <capture number="2" name="r.operator.assignment" />
                    </scope>
                </subscopes>
            </scope>
            
            <scope name="r.definition.function">
                <symbol type="function" />
                <expression>([\w.]+)\s*(&lt;-|=)\s*(function)</expression>
                <capture number="1" name="r.identifier.function.name" />
                <capture number="2" name="r.operator.assignment" />
                <capture number="3" name="r.keyword" />
            </scope>
        </collection>
    </collections>
</syntax>
