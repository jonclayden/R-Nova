<?xml version="1.0" encoding="UTF-8"?>

<syntax name="r">
    <meta>
        <name>R</name>
        <type>script</type>
        <preferred-file-extension>R</preferred-file-extension>
        <scriptable shebang="#!/usr/bin/env Rscript" />
    </meta>
    
    <detectors>
        <extension priority="1.0">R,r</extension>
    </detectors>
    
    <indentation>
        <increase>
            <expression>\{\s*$</expression>
        </increase>
        <decrease>
            <expression>^\s*\}</expression>
        </decrease>
    </indentation>
    
    <comments>
        <single>
            <expression>#</expression>
        </single>
    </comments>
    
    <brackets>
        <pair open="{" close="}" />
        <pair open="[" close="]" />
        <pair open="(" close=")" />
    </brackets>
    
    <surrounding-pairs>
        <pair open="{" close="}" />
        <pair open="[" close="]" />
        <pair open="(" close=")" />
        <pair open="&apos;" close="&apos;" />
        <pair open="&quot;" close="&quot;" />
        <pair open="`" close="`" />
    </surrounding-pairs>
    
    <scopes>
        <include syntax="self" collection="all" />
    </scopes>
    
    <tree-sitter>
        <highlights />
        <symbols />
        <folds />
    </tree-sitter>
    
    <collections>
        <collection name="all">
            <include syntax="self" collection="comments" />
            <include syntax="self" collection="strings" />
            <include syntax="self" collection="blocks" />
            <include syntax="self" collection="keywords" />
            <include syntax="self" collection="values" />
            <include syntax="self" collection="operators" />
            <include syntax="self" collection="calls" />
            <include syntax="self" collection="definitions" />
            <include syntax="self" collection="generic" />
        </collection>
        
        <collection name="keywords">
            <scope name="r.keyword">
                <expression>\b(if|break|next|repeat|else|for|return|while|in|function)\b</expression>
            </scope>
        </collection>
        
        <collection name="operators">
            <scope name="r.operator.pipe">
                <expression>\|&gt;</expression>
            </scope>
            
            <scope name="r.operator.arithmetic">
                <expression>\-|\+|\*|\/|%\/%|%%|%\*%|%in%|%o%|%x%|\^</expression>
            </scope>
            
            <scope name="r.operator.assignment">
                <expression>=|&lt;-|&lt;&lt;-|-&gt;|-&gt;&gt;</expression>
            </scope>
            
            <scope name="r.operator.comparison">
                <expression>==|!=|&lt;|&gt;|&lt;=|&gt;=</expression>
            </scope>
            
            <scope name="r.operator.logical">
                <expression>!|&amp;{1,2}|\|{1,2}</expression>
            </scope>
            
            <scope name="r.operator.index">
                <expression>\[\[?|\]\]?</expression>
            </scope>
            
            <scope name="r.operator.other">
                <expression>\$|@|:|\~</expression>
            </scope>
            
            <scope name="r.operator.infix">
                <expression>%[^%\s]+%</expression>
            </scope>
        </collection>
        
        <collection name="values">
            <scope name="r.value.null">
                <expression>\bNULL\b</expression>
            </scope>
            
            <scope name="r.value.number">
                <expression>(?&lt;![\w.])((0(x|X)[0-9a-fA-F]*)|(-?\d+L?)|(-?\d*\.?\d+((e|E)(\+|-)?\d+)?i?))(?![\d.eE])|\b(Inf|NaN|pi)\b</expression>
            </scope>
            
            <scope name="r.value.boolean">
                <expression>\b(TRUE|FALSE|T|F|NA)\b</expression>
            </scope>
        </collection>
        
        <collection name="strings">
            <scope name="r.string.single-quoted">
                <starts-with>
                    <expression>&apos;</expression>
                </starts-with>
                <ends-with>
                    <expression>&apos;</expression>
                </ends-with>
                <subscopes>
                    <scope name="r.string.single-quoted.escape">
                        <expression>\\.</expression>
                    </scope>
                </subscopes>
            </scope>
            
            <scope name="r.string.double-quoted">
                <starts-with>
                    <expression>&quot;</expression>
                </starts-with>
                <ends-with>
                    <expression>&quot;</expression>
                </ends-with>
                <subscopes>
                    <scope name="r.string.double-quoted.escape">
                        <expression>\\.</expression>
                    </scope>
                </subscopes>
            </scope>
        </collection>
        
        <collection name="comments">
            <scope name="r.comment" spell-check="true">
                <expression>\#.*$</expression>
            </scope>
        </collection>
        
        <collection name="blocks">
            <scope name="r.block">
                <symbol type="block">
                    <context behavior="subtree" group="block" />
                </symbol>
                <starts-with>
                    <expression>\{</expression>
                    <capture number="0" name="r.bracket.brace" />
                </starts-with>
                <ends-with>
                    <expression>\}</expression>
                    <capture number="0" name="r.bracket.brace" />
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="all" />
                </subscopes>
            </scope>
        </collection>
        
        <collection name="calls">
            <scope name="r.identifier.type.basic">
                <expression>(?&lt;![\w.])(logical|numeric|character|complex|matrix|array|data\.frame|list|factor)(?=\s*\()</expression>
            </scope>
            
            <scope name="r.identifier.function">
                <expression>(?&lt;![\w.])([\w.]+)(?=\s*\()</expression>
            </scope>
            
            <scope name="r.arguments">
                <starts-with>
                    <expression>\(</expression>
                    <capture number="0" name="r.bracket.round" />
                </starts-with>
                <ends-with>
                    <expression>\)</expression>
                    <capture number="0" name="r.bracket.round" />
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="comments" />
                    <include syntax="self" collection="strings" />
                    <include syntax="self" collection="keywords" />
                    <include syntax="self" collection="values" />
                    <include syntax="self" collection="blocks" />
                    <include syntax="self" collection="operators" />
                    <include syntax="self" collection="calls" />
                    
                    <scope name="r.separator">
                        <expression>,</expression>
                    </scope>
                    <scope name="r.identifier.argument.ellipsis">
                        <expression>(?&lt;![\w.])(\.{3})(?![\w.])</expression>
                        <capture number="1" name="r.identifier.argument.name" />
                    </scope>
                    <scope name="r.identifier.argument">
                        <expression>([\w.]+)(?=\s*=)</expression>
                        <capture number="1" name="r.identifier.argument.name" />
                    </scope>
                </subscopes>
            </scope>
        </collection>
        
        <collection name="arg-definitions">
            <scope name="r.definition.arguments">
                <starts-with>
                    <expression>\(</expression>
                    <capture number="0" name="r.bracket.round" />
                </starts-with>
                <ends-with>
                    <expression>\)</expression>
                    <capture number="0" name="r.bracket.round" />
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="comments" />
                    <include syntax="self" collection="strings" />
                    <include syntax="self" collection="keywords" />
                    <include syntax="self" collection="values" />
                    <include syntax="self" collection="blocks" />
                    <include syntax="self" collection="operators" />
                    <include syntax="self" collection="calls" />
                    
                    <scope name="r.separator">
                        <expression>,</expression>
                    </scope>
                    <scope name="r.identifier.argument.ellipsis">
                        <symbol type="argument" />
                        <expression>(?&lt;![\w.])(\.{3})(?![\w.])</expression>
                        <capture number="1" name="r.identifier.argument.name" />
                    </scope>
                    <scope name="r.identifier.argument">
                        <symbol type="argument" />
                        <expression>([\w.]+)(?=\s*=)</expression>
                        <capture number="1" name="r.identifier.argument.name" />
                    </scope>
                </subscopes>
            </scope>
        </collection>
        
        <collection name="definitions">
            <scope name="r.definition.function">
                <symbol type="function">
                    <context behavior="subtree" group="function" />
                </symbol>
                <starts-with>
                    <expression>([\w.]+)\s*(&lt;-|=)\s*(function)\s*(\()</expression>
                    <capture number="1" name="r.identifier.function.name" />
                    <capture number="2" name="r.operator.assignment" />
                    <capture number="3" name="r.keyword" />
                    <capture number="4" name="r.bracket.round" />
                </starts-with>
                <ends-with>
                    <expression>$</expression>
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="comments" />
                    <include syntax="self" collection="strings" />
                    <include syntax="self" collection="keywords" />
                    <include syntax="self" collection="values" />
                    <include syntax="self" collection="blocks" />
                    <include syntax="self" collection="operators" />
                    <include syntax="self" collection="calls" />
                    
                    <scope name="r.separator">
                        <expression>,</expression>
                    </scope>
                    <scope name="r.identifier.argument.ellipsis">
                        <symbol type="argument" />
                        <expression>(?&lt;![\w.])(\.{3})(?![\w.])</expression>
                        <capture number="1" name="r.identifier.argument.name" />
                    </scope>
                    <scope name="r.identifier.argument">
                        <symbol type="argument" />
                        <expression>([\w.]+)(?=\s*=)</expression>
                        <capture number="1" name="r.identifier.argument.name" />
                    </scope>
                </subscopes>
            </scope>
            
            <scope name="r.definition.function.start">
                <symbol type="function">
                    <context behavior="start" group="function" unclosed="truncate" />
                </symbol>
                <starts-with>
                    <expression>([\w.]+)\s*(&lt;-|=)\s*(function)</expression>
                    <capture number="1" name="r.identifier.function.name" />
                    <capture number="2" name="r.operator.assignment" />
                    <capture number="3" name="r.keyword" />
                </starts-with>
                <ends-with>
                    <expression>\{</expression>
                    <capture number="0" name="r.bracket.brace" />
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="arg-definitions" />
                </subscopes>
            </scope>
            
            <scope name="r.definition.function.end">
                <symbol type="function">
                    <context behavior="end" group="function" />
                </symbol>
                <expression>\}</expression>
                <capture number="0" name="r.bracket.brace" />
            </scope>
            
            <scope name="r.definition.variable.left">
                <symbol type="variable" />
                <expression>([\w.]+)\s*(&lt;&lt;?-|=)(?!\s*function)</expression>
                <capture number="1" name="r.identifier.variable.name" />
                <capture number="2" name="r.operator.assignment" />
            </scope>
            
            <scope name="r.definition.variable.right">
                <symbol type="variable" />
                <expression>(-&gt;&gt;?)\s*([\w.]+)</expression>
                <capture number="1" name="r.operator.assignment" />
                <capture number="2" name="r.identifier.variable.name" />
            </scope>
        </collection>
        
        <collection name="generic">
            <scope name="r.namespace">
                <expression>([\w.]+)(:::?)(?=[\w.])</expression>
                <capture number="1" name="r.identifier.namespace" />
                <capture number="2" name="r.operator.namespace" />
            </scope>
            
            <scope name="r.object">
                <expression>(\.[A-Za-z_]?|[A-Za-z])[\w.]*</expression>
                <capture number="0" name="r.identifier.object.name" />
            </scope>
        </collection>
    </collections>
</syntax>
